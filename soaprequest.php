<?php


if ($_GET['keyword']) {

    $keyword = $_GET['keyword'];
    $method = "keyword";
}

if ($_GET['id']) {

    $id = $_GET['id'];
    $method = "id";
}

if (isset($method)) {

    switch ($method) {

        case "keyword" :
            listRegExp($keyword);
            break;


        case "id" :
            getRegByID($id);
            break;

    }

}

// TODO: Convert to a class system, integrate caching in database and better error handling

function listRegExp($keywordToPass)
{
    // Create a new SOAPClient object
    $client = new SoapClient('http://regexlib.com/webservices.asmx?WSDL', array('soap_version' => 1.2));

    // The request will fail if spaces are not url-encoded
    $keywordToPass = replaceSpacesInUrl($keywordToPass);

    // Use the listRegExp method generated by the WSDL file to ask for the specified regular expressions
    // The parameters are hardcoded in at the moment, but could easily be replaced sending
    // options along in the HTTP request
    $response = $client->listRegExp(array('keyword' => $keywordToPass, 'min_rating' => '-1', 'howmanyrows' => "162"));


    // Convert the response received from the SOAP web service to JSON then again into an associative array
    $jsonResponse = json_decode(XML2JSON($responseAsXML = $response->listRegExpResult->any), true);

    // Create a new array of just the expressions
    $expressions = $jsonResponse['NewDataSet']['Expressions'];


    if (isset($expressions)) {

        echo(json_encode($expressions));

    } else {

        print("No Data Set");

    }
}


function getRegByID($idToPass)
{
    // Create a new SOAPClient object
    $client = new SoapClient('http://regexlib.com/webservices.asmx?WSDL', array('soap_version' => 1.2));


    if (is_numeric($idToPass)) {
        $idToPass = intval($idToPass);
        $response = $client->getRegExpDetails(array('regexpId' => $idToPass));


        // Use the listRegExp method generated by the WSDL file to ask for the specified regular expressions
        // The parameters are hardcoded in at the moment, but could easily be replaced sending
        // options along in the HTTP request
        $jsonResponse = json_encode($response->getRegExpDetailsResult);
        $expressions = $jsonResponse;

        if (isset($expressions)) {

            echo(html_entity_decode($expressions));

        } else {

            print("No Data Set");

        }
    } else {
        print "Please provide an integer";
    }

}


// Purpose: Perform urlencoding on spaces in the url parameter
function replaceSpacesInUrl($urlParameter)
{
    return preg_replace('#[ ]#', '%20', $urlParameter);

}

// Purpose: Workaround for how bind_param works. Will return an array containing all of the results from a select statement
//function fetch($result)
//{
//    $array = array();
//
//    if ($result instanceof mysqli_stmt) {
//        $result->store_result();
//
//        $variables = array();
//        $data = array();
//        $meta = $result->result_metadata();
//
//        while ($field = $meta->fetch_field())
//            $variables[] = & $data[$field->name]; // pass by reference
//
//        call_user_func_array(array($result, 'bind_result'), $variables);
//
//        $i = 0;
//        while ($result->fetch()) {
//            $array[$i] = array();
//            foreach ($data as $k => $v)
//                $array[$i][$k] = $v;
//            $i++;
//
//        }
//    } elseif ($result instanceof mysqli_result) {
//        while ($row = $result->fetch_assoc())
//            $array[] = $row;
//    }
//
//    return $array;
//}

// Converts an XML object to JSON

function XML2JSON($xml)
{

    function normalizeSimpleXML($obj, &$result)
    {
        $data = $obj;
        if (is_object($data)) {
            $data = get_object_vars($data);
        }
        if (is_array($data)) {
            foreach ($data as $key => $value) {
                $res = null;
                normalizeSimpleXML($value, $res);
                if (($key == '@attributes') && ($key)) {
                    $result = $res;
                } else {
                    $result[$key] = $res;
                }
            }
        } else {
            $result = $data;
        }
    }

    normalizeSimpleXML(simplexml_load_string($xml), $result);
    return json_encode($result);
}

?>
